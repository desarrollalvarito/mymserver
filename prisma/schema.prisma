generator client {
  provider = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Person {
  id        Int       @id @default(autoincrement())
  run       String?   @unique(map: "run") @db.VarChar(50)
  names     String    @db.VarChar(50)
  lastName  String?   @db.VarChar(50)
  gender    Gender    @default(OTHER)
  address   String?   @db.VarChar(250)
  contact   String?   @db.VarChar(50)
  birthdate DateTime? @db.Date
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  client    Client?
  employee  Employee?
  user      User?
}

model User {
  id          Int       @id @default(autoincrement())
  username    String    @unique(map: "username") @db.VarChar(255)
  email       String?   @unique(map: "email") @db.VarChar(255)
  password    String    @db.VarChar(255)
  personId    Int       @unique
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  person      Person    @relation(fields: [personId], references: [id])
}

model Client {
  id              Int     @id @default(autoincrement())
  shippingAddress String  @db.VarChar(100)
  billName        String? @db.VarChar(100)
  rut             String? @unique @db.VarChar(100)
  personId        Int     @unique
  person          Person  @relation(fields: [personId], references: [id])
  order           Order[]
}

model Employee {
  id              Int          @id @default(autoincrement())
  jobRole         JobRoles     @default(BAKER)
  workShift       String       @db.VarChar(50)
  state           State        @default(ACTIVE)
  personId        Int          @unique
  // Relaciones
  person          Person       @relation(fields: [personId], references: [id])
  delivery        Delivery[]   @relation("EmployeeDelivery")
  production      Production[] @relation("ProductionCook")
}

model Subsidiary {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(50)
  description String   @db.VarChar(150)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userAt      Int
}

model Product {
  id                  Int            @id @default(autoincrement())
  name                String         @db.VarChar(50)
  price               Decimal        @db.Decimal(10, 2)
  state               State          @default(ACTIVE)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  userAt              Int
  orderProduct        OrderProduct[]
  stock               Stock?
  saleItem            SaleItem[]
  productionProduct   ProductionProduct[]
}

model Order {
  id           Int            @id @default(autoincrement())
  date         DateTime       @db.Date
  state        OrderStatus    @default(PENDING)
  clientId     Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  userAt       Int
  // Relaciones
  client       Client         @relation(fields: [clientId], references: [id])
  delivery     Delivery?
  sale         Sale?
  orderProduct OrderProduct[]

  @@index([clientId], map: "Order_clientId_fkey")
}

model OrderProduct {
  id                Int      @id @default(autoincrement())
  productId         Int
  orderId           Int
  quantity          Int
  unitPrice         Decimal  @db.Decimal(10, 2)
  state             State    @default(ACTIVE)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  userAt            Int

  // Relaciones
  order             Order    @relation(fields: [orderId], references: [id])
  product           Product  @relation(fields: [productId], references: [id])

  @@index([orderId], map: "OrderProduct_orderId_fkey")
  @@index([productId], map: "OrderProduct_productId_fkey")
}

model Delivery {
  id              Int            @id @default(autoincrement())
  orderId         Int            @unique
  driverId        Int            
  status          DeliveryStatus @default(PENDING)
  deliveryTime    DateTime?      @db.DateTime
  scheduled       DateTime?      @db.DateTime
  notes           String?        @db.VarChar(500)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  userAt          Int

  // Relaciones
  order           Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  driver          Employee       @relation(fields: [driverId], references: [id], name: "EmployeeDelivery")
}

model Production {
  id                Int              @id @default(autoincrement())
  date              DateTime         @db.Date
  assignedTo        Int              // usuario cocinero
  status            ProductionStatus @default(PENDING)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  userAt            Int

  // Relaciones
  cook              Employee         @relation(fields: [assignedTo], references: [id], name: "ProductionCook")
  productionProduct ProductionProduct[]
}

model ProductionProduct {
  id                  Int             @id @default(autoincrement())
  productionId        Int
  productId           Int
  quantity            Int
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  userAt              Int
  production          Production      @relation(fields: [productionId], references: [id])
  product             Product         @relation(fields: [productId], references: [id])

  @@index([productionId], map: "ProductionProduct_productionId_fkey")
  @@index([productId], map: "ProductionProduct_productId_fkey")
}

model Sale {
  id            Int           @id @default(autoincrement())
  orderId       Int           @unique
  date          DateTime      @db.Date
  subtotal      Decimal       @db.Decimal(10, 2)
  discount      Decimal       @db.Decimal(10, 2)
  tax           Decimal       @db.Decimal(10, 2)
  totalAmount   Decimal       @db.Decimal(10, 2)
  amountPaid    Decimal       @db.Decimal(10, 2)
  balance       Decimal       @db.Decimal(10, 2)
  paymentStatus PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  userAt        Int

  order         Order?         @relation(fields: [orderId], references: [id])
  saleItems     SaleItem[]
  payments      Payment[]     // Relación con pagos
  
  @@index([date])
}

model SaleItem {
  id          Int      @id @default(autoincrement())
  saleId      Int
  productId   Int
  quantity    Int
  unitPrice   Decimal  @db.Decimal(10, 2)
  totalPrice  Decimal  @db.Decimal(10, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userAt      Int

  // Relaciones
  sale        Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product     Product  @relation(fields: [productId], references: [id])
}

model Payment {
  id            Int           @id @default(autoincrement())
  saleId        Int
  amount        Decimal       @db.Decimal(10, 2)
  paymentMethod PaymentMethod
  reference     String?       @db.VarChar(100) // Referencia de transferencia, último 4 dígitos de tarjeta, etc.
  notes         String?       @db.VarChar(500)
  status        PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  userAt        Int
  
  // Relaciones
  sale          Sale          @relation(fields: [saleId], references: [id], onDelete: Cascade)
  
  @@index([saleId])
}

model Stock {
  id            Int      @id @default(autoincrement())
  initialAmount Int
  currentAmount Int
  productId     Int      @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userAt        Int
  product       Product  @relation(fields: [productId], references: [id])
}

// ENUMS
enum OrderStatus {
  PENDING     // Pendiente
  IN_PRODUCTION // En producción
  READY       // Listo para entrega
  DELIVERED   // Entregado
  CANCELLED   // Cancelado
}

enum ProductionStatus {
  PENDING     // Pendiente
  IN_PROGRESS // En preparación
  COMPLETED   // Completado
  CANCELLED   // Cancelado
}

enum DeliveryStatus {
  PENDING     // Pendiente
  SCHEDULED   // Programado
  IN_TRANSIT  // En camino
  DELIVERED   // Entregado
  CANCELLED   // Cancelado
}

enum PaymentMethod {
  CASH        // Efectivo
  CARD        // Tarjeta
  TRANSFER    // Transferencia
  DIGITAL     // Pago digital
}

enum PaymentStatus {
  PENDING     // Pendiente
  PAID        // Pagado completamente
  PARTIAL     // Pago parcial
  CANCELLED   // Cancelado
  REFUNDED    // Reembolsado
}

enum JobRoles {
  MANAGER
  ADMIN
  BAKER
  DELIVERY
  CASHIER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum State {
  ACTIVE
  INACTIVE
}